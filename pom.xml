<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>js-training</groupId>
    <artifactId>js-training</artifactId>
    <packaging>war</packaging>
    <version>1.0</version>
    <name>js-training Maven Webapp</name>
    <url>http://maven.apache.org</url>
    
    
    <properties>
		<maven.dependency.plugin.version>2.8</maven.dependency.plugin.version>
		<jsHint.plugin.version>1.1</jsHint.plugin.version>
		<jsLint.plugin.version>2.0.5</jsLint.plugin.version>
		<jsHint.lib.version>2.1.9</jsHint.lib.version>
		<jasmine.plugin.version>1.3.1.3</jasmine.plugin.version>
		<exec.maven.plugin.version>1.2.1</exec.maven.plugin.version>
		<phantomjs.dependency.version>1.0.0</phantomjs.dependency.version>
		<cargo.plugin.version>1.4.5</cargo.plugin.version>
		
		<!-- Quality checks for the JSHint plugin. You can find all checks here : http://www.jshint.com/docs/options/  -->
		<jsHint.checks>maxparams:3, camelcase, eqeqeq, forin,
			immed, latedef,
			quotmark:true, maxdepth:5,
			noarg, noempty, nonew, unused, undef,
			trailing, maxlen:120,
			curly, newcap, browser, jquery, bitwise, es3</jsHint.checks>
		
		<!-- Global variables for tests. You can add other variables, if necessary -->
		<globals>ok, test, asyncTest, expect, module, jQuery, ${dollar}, console,
			jasmine, describe, it, beforeEach, afterEach, spyOn</globals>
	</properties>
	
    <repositories>
    <repository>
       <id>deployment</id>
       <name>Internal Releases</name>
       <url>http://nexus.noveogroup.com/content/groups/public</url>
   </repository>
  </repositories>
    

    <dependencies>
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20090211</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>javax.servlet.jsp-api</artifactId>
            <version>2.2.1</version>
        </dependency>

    </dependencies>


    <build>
        <finalName>js-training</finalName>
		
		<pluginManagement>
			<plugins>
				<!-- JSLint plugin (code quality checker). 
				This plugin will check your code during project build process.
				You can read about it here:  http://docs.jslint4java.googlecode.com/git/2.0.5/maven.html 
				Also, you can see all quality options here: http://docs.jslint4java.googlecode.com/git/2.0.5/apidocs/com/googlecode/jslint4java/Option.html 
				-->
				<plugin>
					<groupId>com.googlecode.jslint4java</groupId>
					<artifactId>jslint4java-maven-plugin</artifactId>
					<version>2.0.5</version>
					<executions>
						<execution>
							<id>lint</id>
							<goals>
								<goal>lint</goal>
							</goals>
							<phase>process-resources</phase>

							<configuration>
								<failOnError>true</failOnError>
								<sourceFolders>
									<!-- You can put here other source folders but is NOT necessery in most cases -->
									<sourceFolder>src</sourceFolder>
								</sourceFolders>
								<options>
									<!-- you can put other options here -->
									<browser>true</browser>						
									<predef>${dollar}{globals}</predef>
								</options>
								<excludes>
									<!-- You can put here other sources which will be ignored by code analyzer, but you should have serious reasons for it.
									Please notify your tutor if you want to add excludes. -->
									<exclude>**/lib/*.js</exclude>
								</excludes>
							</configuration>

						</execution>
					</executions>
				</plugin>

				<!-- JsHint - another code quality checker (for 'strict' profile).
				You can find all options here : http://www.jshint.com/docs/options/ 
				You can find information about inline global vars initialization and other 
				useful features here: http://www.jshint.com/docs/#usage
				 -->
				<plugin>
					<groupId>com.cj.jshintmojo</groupId>
					<artifactId>jshint-maven-plugin</artifactId>
					<version>1.3.0</version>
					<executions>
						<execution>
							<goals>
								<goal>lint</goal>
							</goals>
							<configuration>
								<version>2.4.1</version>
								<!-- <options>${dollar}{jsHint.checks}</options>
								<globals>${dollar}{globals}</globals>-->
								<excludes>
									<!-- You can put here other sources which will be ignored by code analyzer, but you should have good reasons for it.
									Please notify your tutor if you want to add other excludes. -->
									<exclude>src/test/lib</exclude>
									<exclude>src/javascript/lib</exclude>
								</excludes>
							</configuration>
						</execution>
					</executions>
				</plugin>
 
			 
			</plugins>
		</pluginManagement>


        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>6</source>
                    <target>6</target>
                </configuration>
            </plugin>
            
            <!-- default quality check -->
			<plugin>
				<groupId>com.googlecode.jslint4java</groupId>
				<artifactId>jslint4java-maven-plugin</artifactId>
			</plugin>
			
			<plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <configuration>
                    <path>/</path>
                    <warFile>${project.build.directory}/${project.build.finalName}.war</warFile>
                </configuration>
            </plugin>

        </plugins>
    </build>
    
    <profiles>
		<!-- for experienced developers -->
		<profile>
			<id>strict</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.cj.jshintmojo</groupId>
						<artifactId>jshint-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>	
		
</project>
